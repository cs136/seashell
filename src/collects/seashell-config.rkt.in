#lang racket/base
;; Seashell - a C Development Environment.
;; Copyright (C) 2013-2015 The Seashell Maintainers.
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.
;;
;; See also 'ADDITIONAL TERMS' at the end of the included LICENSE file.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.
(require (only-in ffi/unsafe ffi-lib)
         racket/contract
         racket/path
         racket/match)
(provide read-config config-set! config-refresh! SEASHELL_VERSION SEASHELL_BRANCH SEASHELL_COMMIT SEASHELL_API_VERSION
         SEASHELL_BUILD_PATH SEASHELL_DEBUG SEASHELL_INSTALLED SEASHELL_INSTALL_PATH)

;; Versioning information.
(define SEASHELL_VERSION "@SEASHELL_VERSION@")
(define SEASHELL_BRANCH "@GIT_BRANCH@")
(define SEASHELL_COMMIT "@GIT_COMMIT_HASH@")
(define SEASHELL_API_VERSION @SEASHELL_API_VERSION@)
(define SEASHELL_BUILD_PATH "@CMAKE_BINARY_DIR@")

;; (read-config key) takes a symbol? key, and looks it up in the config hash;
;; produces the corresponding value, or dies with an error if the key was not
;; found
(define (read-config k)
  (hash-ref config-hash k (lambda () (error 'read-config "Configuration key `~a' not found" k))))

;; Can we override these flags?
(define override? (not/c (or/c 'seashell-crypto 'seashell-support 'seashell-clang 'seashell-git
                               'seashell-known-hosts 'seashell-runtime-library 'seashell-runtime-racket-library
                               'seashell-install 'server-memory-limit 'request-memory-limit)))

;; (config-set! key val) takes a symbol? key and any val, and mutates the
;; config to associate the key with the value. If the key is already there, it
;; updates the value it points to; if it isn't there, it creates a new
;; key/value pair in the hash
(define/contract (config-set! key val)
  (-> override? any/c any/c)
  (hash-set! config-hash key val))

;; (config-refresh!) Rereads the config file, and resets the current
;; configuration to the default. The purpose of this function is to reset all
;; changes made by config-set!
(define (config-refresh!)
  (set! config-hash (make-config))
  (load-config))

;; These constants are used to build several configuration values.
(define SEASHELL_INSTALL_PATH
  "@CMAKE_INSTALL_PREFIX@")
(define SEASHELL_DEBUG
  (= 1 @SEASHELL_DEBUG@))
(define SEASHELL_INSTALLED
  (let
    ([base (simple-form-path SEASHELL_INSTALL_PATH)]
     [current (simple-form-path (find-executable-path (find-system-path 'exec-file)))])
    (not (member 'up (explode-path (find-relative-path base current))))))

;; Generates a new (fresh) configuration populated only with default values.
(define (make-config)
  ;; Default configuration values
  (define config-hash 
    (make-hash 
     (list
      ;; These flags cannot be overridden by any configuration file.
      ;; Note: In a debug build, prefer locations in BUILD_DIR over INSTALL_DIR if exists.
      ;; Location of Seashell (native) support library.
      (cons 'seashell-support              (let
                                            ([install-path (build-path SEASHELL_INSTALL_PATH "lib" "libseashell-support")]
                                             [build-path (build-path SEASHELL_BUILD_PATH "src/backend/user/libseashell-support")])
                                            (if (and (not SEASHELL_INSTALLED) (ffi-lib build-path #:fail (lambda () #f)))
                                              build-path
                                              install-path)))
      ;; Location of Seashell clang library.
      (cons 'seashell-clang                (let
                                            ([install-path (build-path SEASHELL_INSTALL_PATH "lib" "libseashell-clang")]
                                             [build-path (build-path SEASHELL_BUILD_PATH "src/backend/compiler/libseashell-clang")])
                                            (if (and (not SEASHELL_INSTALLED) (ffi-lib build-path #:fail (lambda () #f)))
                                              build-path
                                              install-path)))
      ;; Location of SSH known hosts file.
      (cons 'seashell-known-hosts          (let
                                            ([install-path (build-path SEASHELL_INSTALL_PATH "etc" "seashell_hosts")]
                                             [build-path (build-path SEASHELL_BUILD_PATH "etc/seashell_hosts")])
                                            (if (and (not SEASHELL_INSTALLED) (file-exists? build-path))
                                              build-path
                                              install-path)))
      ;; Location of Seashell's Runtime Library
      (cons 'seashell-runtime-library      (let
                                            ([install-path (build-path SEASHELL_INSTALL_PATH "lib" "libseashell-rt.a")]
                                             [build-path (build-path SEASHELL_BUILD_PATH "src/runtime/libseashell-rt.a")])
                                            (if (and (not SEASHELL_INSTALLED) (file-exists? build-path))
                                              build-path
                                              install-path)))
      (cons 'seashell-racket-runtime-library
                                           (let
                                            ([install-path (build-path SEASHELL_INSTALL_PATH "lib" "seashell-runtime.rkt")]
                                             [build-path (build-path SEASHELL_BUILD_PATH "src/runtime/seashell-runtime.rkt")])
                                            (if (and (not SEASHELL_INSTALLED) (file-exists? build-path))
                                              build-path
                                              install-path)))
      ;; Location of install path.
      (cons 'seashell-install              (build-path SEASHELL_INSTALL_PATH))

      ;; These flags can be overridden by the configuration file,
      ;; but the default parameters change depending on if this is a debug build or not.
      ;; We prefer build paths over install paths in a debug build.
      ;; (again, so we can run out of tree without installing Seashell)
      ;; Location of SSL key.
      (cons 'ssl-key                       (let
                                            ([install-path (build-path SEASHELL_INSTALL_PATH "etc" "keys" "server-key.pem")]
                                             [build-path (build-path SEASHELL_BUILD_PATH "etc" "keys" "server-key.pem")])
                                            (if (and (not SEASHELL_INSTALLED) (file-exists? build-path))
                                              build-path
                                              install-path)))
      ;; Location of SSL certificate.
      (cons 'ssl-cert                     (let
                                            ([install-path (build-path SEASHELL_INSTALL_PATH "etc" "keys" "server.pem")]
                                             [build-path (build-path SEASHELL_BUILD_PATH "etc" "keys" "server.pem")])
                                            (if (and (not SEASHELL_INSTALLED) (file-exists? build-path))
                                              build-path
                                              install-path)))
      ;; Location of SSH tunnel binary.
      (cons 'tunnel-binary                 (let
                                            ([install-path (build-path SEASHELL_INSTALL_PATH "bin" "seashell-tunnel")]
                                             [build-path (build-path SEASHELL_BUILD_PATH "backend/tunnel/seashell-tunnel")])
                                            (if (and (not SEASHELL_INSTALLED) (file-exists? build-path))
                                              build-path
                                              install-path)))
      ;; Location of remote backend
      (cons 'seashell-backend-remote       (let
                                            ([install-path (build-path SEASHELL_INSTALL_PATH "bin" "seashell-user-backend")]
                                             [build-path (build-path SEASHELL_BUILD_PATH "backend/user/seashell-user-backend")])
                                            (if (and (not SEASHELL_INSTALLED) (file-exists? build-path))
                                              build-path
                                              install-path)))
      ;; Location of LLVM symbolizer.
      (cons 'llvm-symbolizer               (let
                                            ([install-path (build-path SEASHELL_INSTALL_PATH "bin" "llvm-symbolizer")]
                                             [build-path (build-path SEASHELL_BUILD_PATH "lib/llvm/bin/llvm-symbolizer")])
                                            (if (and (not SEASHELL_INSTALLED) (file-exists? build-path))
                                              build-path
                                              install-path)))
      ;; Default binary to invoke when linking.
      (cons 'system-linker                 (let
                                            ([install-path (build-path SEASHELL_INSTALL_PATH "bin" "clang++")]
                                             [build-path (build-path SEASHELL_BUILD_PATH "lib/llvm/bin/clang++")])
                                            (if (and (not SEASHELL_INSTALLED) (file-exists? build-path))
                                              build-path
                                              install-path)))

      ;; These flags can be overridden by the configuration file.
      ;; Default compiler flags.
      (cons 'compiler-flags               '(;; Warning flags.
                                            "-Wall" "-Werror=int-conversion" "-Werror=int-to-pointer-cast" "-Werror=return-type" "-Werror=import-preprocessor-directive-pedantic"
                                            ;; Compilation flags.
                                            "-gdwarf-4" "-O0" "-mdisable-fp-elim" "-dwarf-column-info"
                                            ;; Static Analyzer flags.
                                            ; Add standard static analyzer options (clang/lib/Driver/Tools.cpp:2954)
                                            "-analyzer-store=region"
                                            "-analyzer-opt-analyze-nested-blocks"
                                            "-analyzer-eagerly-assume"
                                            ; Run all analysis passes. (clang -cc1 -analyzer-checker-help  | awk '{print $1}' | grep -v '^[A-Z]' | awk -F. '{print $1}' | sort | uniq)
                                            "-analyzer-checker=core,cplusplus,deadcode,osx,unix"))
      ;; Optional login tracking helper.  (Runs whenever a user logs in.)
      (cons 'login-tracking-helper         #f)
      ;; Enable debug mode execution (corresponds to seashell-numeric-debug value by default)
      (cons 'debug                         SEASHELL_DEBUG)
      ;; Backend target host. The gateway will attempt to start user sessions on this host
      ;; via SSH.
      (cons 'host                          '("localhost"))
      ;; Location of per-user configuration directory.
      (cons 'seashell                      (build-path (find-system-path 'home-dir) ".seashell"))
      ;; Name of credentials file.
      (cons 'seashell-creds-name           (format "seashell~a-creds" @SEASHELL_API_VERSION@))
      ;; Name of credentials cookie
      (cons 'seashell-creds-cook           (format "seashell~a-creds" @SEASHELL_API_VERSION@))
      ;; Name of special subdirectory in each user program which contains tests (.in and .expect files)
      (cons 'tests-subdirectory            "tests")
      ;; Name of special subdirectory in each user program which contains common files.
      (cons 'common-subdirectory            "common")
      ;; Location of the Submit tool
      (cons 'submit-tool                    "/u8/cs_build/bin/marmoset_submit")
      ;; Location of the default project template
      (cons 'default-project-template       "https://github.com/cs136/seashell-default/archive/v1.0.zip")
      ;; Ping timeout in seconds for the seashell UDP listener, which verifies the seashell process is still alive
      (cons 'seashell-ping-timeout         4)
      ;; Timeout in milliseconds after which a per-user backend process, having
      ;; received no new messages, will terminate.
      (cons 'backend-client-idle-timeout   1800000)
      ;; Timeout in milliseconds after which a per-user backend connection,
      ;; having received no new messages, will quit.
      (cons 'backend-client-connection-timeout 900000)
      ;; I/O buffer sizes
      (cons 'io-buffer-size 128) ;; Something small enough or else JavaScript will choke up.
      ;; Memory Limits
      (cons 'server-memory-limit 1024) ;; 1G
      (cons 'request-memory-limit 128) ;; 128M
      ;; Timeout in seconds after which an in-progress gateway login will be killed.
      (cons 'backend-login-timeout         30)
      ;; Whether or not the system is running tests,
      ;; useful for disabling things like log file during tests
      (cons 'test-mode                     #f)
      ;; Default shell
      (cons 'system-shell                  (string->path "/bin/sh"))
      ;; Racket interpreter
      (cons 'racket-interpreter            (string->path "/usr/bin/racket"))
      ;; diff program
      (cons 'diff-program                  (string->path "/usr/bin/diff"))
      ;; Default system SSH binary
      (cons 'ssh-binary                    (string->path "/usr/bin/ssh"))
      ;; Prefix on linker flags.
      (cons 'linker-flag-prefix            "-Wl,"))))
  config-hash)

;; The hash table holding the configuration
(define config-hash (make-config))

;; Attempt to override default config values with values read from config file
(define release-config-file (build-path SEASHELL_INSTALL_PATH "etc" "seashell_config.rkt"))
(define debug-config-file (build-path SEASHELL_BUILD_PATH "etc" "seashell_config.rkt"))

;; Overrides the current configuration with entries from $INSTALL/etc/seashell_config.rkt
(define (load-config)
  (define config-file
    (if (and (not SEASHELL_INSTALLED) (file-exists? debug-config-file))
      debug-config-file
      release-config-file))
  (with-handlers 
      ([exn:fail:filesystem? void]) 
    (call-with-input-file* config-file
      (lambda (handle)
        (cond [handle
               (define cfg (read handle))
               (when (not (list? cfg)) (error 'load-config "~a: config file should be an association list" config-file))
               (map (lambda (x) (match x
                                  [(list key val) (config-set! key val)]
                                  [e (error (format 'load-config "~a: element `~s' is not a key-value pair" config-file e))]))
                    cfg)
               (void)])))))
