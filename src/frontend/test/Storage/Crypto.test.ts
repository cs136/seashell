import {Coder, ShittyCoder} from "../../src/helpers/Websocket/Crypto";

describe("Testing crypto.ts", () => {

  it("ShittyCoder.from/toBits", async () => {
    const coder = new ShittyCoder();
    const iv = [1941081379, -1093556581, -680945754, -906315711, 374029103, 678581119, -719504292, 330189591, 209835653, 1051526947, -410226867, -834196114];
    const ivArr = [-268452287, 2147442455, -814781074];
    expect(coder.toBits(iv)).toEqual(ivArr);
    expect(coder.fromBits(ivArr)).toEqual([239, 255, 190, 65, 127, 255, 95, 23, 207, 111, 109, 110]);

  });


  it("ShittyCoder.encrypt", async () => {
    const rawKey = [-1109790771, 1597817371, 586562914, 1041970040];
    const challenge = [206, 188, 95, 148, 105, 144, 143, 127, 229, 229, 72, 139, 18, 59, 133, 68, 90, 220, 118, 61, 216, 134, 193, 252, 5, 10, 187, 93, 127, 213, 40, 172];
    const nonce = [16, 211, 69, 35, 37, 229, 132, 150, 83, 254, 163, 241, 53, 44, 185, 67, 242, 230, 45, 144, 132, 235, 102, 89, 23, 60, 126, 77, 187, 152, 14, 129];
    const iv = [1756403690, 223515301, 351329890, 607156331, -1292955664, 92266654, 1125168145, -1240689729, -404423195, 1795392271, 1877605795, 1337327292];
    const target = new ShittyCoder();
    const result = await target.encrypt(rawKey, challenge, nonce, iv);
    expect(result.iv).toEqual([254, 255, 122, 107, 246, 190, 147, 191, 239, 255, 255, 188]);
    expect(result.encrypted).toEqual([212, 8, 245, 234, 124, 24, 4, 112, 55, 91, 133, 99, 43, 136, 31, 111, 207, 39, 32, 153, 157, 66, 28, 238, 102, 90, 39, 135, 8, 101, 160, 71, 73, 151, 192, 147, 121, 36, 201, 132, 177, 212, 67, 107, 28, 126, 190, 150, 184, 221, 249, 253, 134, 201, 132, 143, 50, 4, 102, 107, 20, 67, 167, 129]);
    expect(result.authTag).toEqual([211, 24, 56, 236, 206, 253, 197, 99, 206, 35, 231, 227, 158, 224, 57, 122]);
  });


  it.skip("Coder.encrypt", async () => {
    const rawKey = [-1109790771, 1597817371, 586562914, 1041970040];
    const challenge = [99, 162, 194, 44, 99, 79, 57, 221, 117, 76, 221, 210, 43, 103, 168, 100, 114, 79, 74, 193, 71, 188, 13, 176, 39, 116, 153, 3, 109, 173, 65, 33];
    const nonce = [250, 138, 137, 138, 11, 209, 20, 121, 225, 33, 238, 201, 16, 56, 222, 79, 36, 11, 108, 223, 7, 30, 190, 159, 21, 232, 7, 82, 48, 101, 89, 141];
    const iv = [1941081379, -1093556581, -680945754, -906315711, 374029103, 678581119, -719504292, 330189591, 209835653, 1051526947, -410226867, -834196114];
    const target = new Coder(rawKey);
    const result = await target.encrypt(rawKey, challenge, nonce, iv);
    expect(result.iv).toEqual([239, 255, 190, 65, 127, 255, 95, 23, 207, 111, 109, 110]);
    expect(result.encrypted).toEqual([109, 50, 58, 108, 139, 99, 64, 23, 226, 128, 25, 121, 25, 117, 137, 150, 227, 137, 74, 33, 138, 30, 108, 253, 26, 228, 15, 201, 253, 179, 227, 219, 25, 176, 155, 79, 193, 135, 1, 233, 224, 92, 230, 78, 248, 236, 229, 146, 25, 111, 60, 196, 162, 71, 185, 46, 3, 86, 140, 40, 144, 114, 102, 110]);
    expect(result.authTag).toEqual([194, 250, 114, 226, 46, 43, 166, 234, 89, 161, 66, 5, 32, 254, 36, 199]);
  });

  it.skip("Coder.encrypt", async () => {
    const rawKey = [-1109790771, 1597817371, 586562914, 1041970040];
    const challenge = [206, 188, 95, 148, 105, 144, 143, 127, 229, 229, 72, 139, 18, 59, 133, 68, 90, 220, 118, 61, 216, 134, 193, 252, 5, 10, 187, 93, 127, 213, 40, 172];
    const nonce = [16, 211, 69, 35, 37, 229, 132, 150, 83, 254, 163, 241, 53, 44, 185, 67, 242, 230, 45, 144, 132, 235, 102, 89, 23, 60, 126, 77, 187, 152, 14, 129];
    const iv = [1756403690, 223515301, 351329890, 607156331, -1292955664, 92266654, 1125168145, -1240689729, -404423195, 1795392271, 1877605795, 1337327292];
    const target = new Coder(rawKey);
    const result = await target.encrypt(rawKey, challenge, nonce, iv);
    expect(result.iv).toEqual([254, 255, 122, 107, 246, 190, 147, 191, 239, 255, 255, 188]);
    expect(result.encrypted).toEqual([212, 8, 245, 234, 124, 24, 4, 112, 55, 91, 133, 99, 43, 136, 31, 111, 207, 39, 32, 153, 157, 66, 28, 238, 102, 90, 39, 135, 8, 101, 160, 71, 73, 151, 192, 147, 121, 36, 201, 132, 177, 212, 67, 107, 28, 126, 190, 150, 184, 221, 249, 253, 134, 201, 132, 143, 50, 4, 102, 107, 20, 67, 167, 129]);
    expect(result.authTag).toEqual([211, 24, 56, 236, 206, 253, 197, 99, 206, 35, 231, 227, 158, 224, 57, 122]);
  });

  it.skip("Coder.encrypt", async () => {
    const rawKey = [-1109790771, 1597817371, 586562914, 1041970040];
    const challenge = [99, 162, 194, 44, 99, 79, 57, 221, 117, 76, 221, 210, 43, 103, 168, 100, 114, 79, 74, 193, 71, 188, 13, 176, 39, 116, 153, 3, 109, 173, 65, 33];
    const nonce = [250, 138, 137, 138, 11, 209, 20, 121, 225, 33, 238, 201, 16, 56, 222, 79, 36, 11, 108, 223, 7, 30, 190, 159, 21, 232, 7, 82, 48, 101, 89, 141];
    const iv = [1941081379, -1093556581, -680945754, -906315711, 374029103, 678581119, -719504292, 330189591, 209835653, 1051526947, -410226867, -834196114];
    const target = new Coder(rawKey);
    const result = await target.encrypt(rawKey, challenge, nonce, iv);
    expect(result.iv).toEqual([239, 255, 190, 65, 127, 255, 95, 23, 207, 111, 109, 110]);
    expect(result.encrypted).toEqual([109, 50, 58, 108, 139, 99, 64, 23, 226, 128, 25, 121, 25, 117, 137, 150, 227, 137, 74, 33, 138, 30, 108, 253, 26, 228, 15, 201, 253, 179, 227, 219, 25, 176, 155, 79, 193, 135, 1, 233, 224, 92, 230, 78, 248, 236, 229, 146, 25, 111, 60, 196, 162, 71, 185, 46, 3, 86, 140, 40, 144, 114, 102, 110]);
    expect(result.authTag).toEqual([194, 250, 114, 226, 46, 43, 166, 234, 89, 161, 66, 5, 32, 254, 36, 199]);
  });

});
